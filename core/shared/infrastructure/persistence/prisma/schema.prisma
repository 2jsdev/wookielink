datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["views"]
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    username      String?       @unique
    emailVerified DateTime?     @map("email_verified")
    image         String?
    bio           String?
    themeId       String?
    layout        ProfileLayout @default(Classic)
    accounts      Account[]
    sessions      Session[]
    links         Link[]
    activities    Activity[]
    collections   Collection[]
    theme         Theme?        @relation(fields: [themeId], references: [id], onDelete: SetNull)

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

enum ProfileLayout {
    Classic
    Hero
}

model Collection {
    id        String   @id @default(cuid())
    title     String
    userId    String   @map("user_id")
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    links     Link[]

    @@map("collections")
}

enum CollectionLayout {
    Stack
    Grid
    Carousel
}

model Link {
    id           String      @id @default(cuid())
    type         LinkType    @default(Link)
    layout       LinkLayout  @default(Classic)
    icon         String?
    thumbnail    String?
    title        String?
    url          String?     @db.Text
    position     Int
    userId       String      @map("user_id")
    collectionId String?
    active       Boolean     @default(true)
    archived     Boolean     @default(false)
    prioritize   Boolean     @default(false)
    createdAt    DateTime    @default(now())
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    activities   Activity[]
    collection   Collection? @relation(fields: [collectionId], references: [id])

    @@index([userId, collectionId, active])
    @@map("links")
}

enum LinkType {
    Link
    SocialIcon
}

enum LinkLayout {
    Classic
    Feature
}

model Activity {
    id        String       @id @default(cuid())
    type      ActivityType @default(View)
    userId    String       @map("user_id")
    linkId    String       @map("link_id")
    metadata  Json?
    timestamp DateTime     @default(now())
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    link      Link         @relation(fields: [linkId], references: [id], onDelete: Cascade)

    @@index([linkId, timestamp])
    @@map("activities")
}

enum ActivityType {
    View
    Click
}

model Theme {
    id            String      @id @default(cuid())
    name          String      @unique
    description   String?
    previewUrl    String
    isPremium     Boolean     @default(false)
    backgroundId  String
    buttonStyleId String
    fontId        String
    colorsId      String
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    background    Background  @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
    buttonStyle   ButtonStyle @relation(fields: [buttonStyleId], references: [id], onDelete: Cascade)
    colors        ThemeColors @relation(fields: [colorsId], references: [id], onDelete: Cascade)
    font          Font        @relation(fields: [fontId], references: [id], onDelete: Cascade)
    users         User[]
}

enum BackgroundType {
    FLAT
    GRADIENT
    IMAGE
    VIDEO
}

enum PatternType {
    NONE
    POLKA
    STRIPE
    WAVES
    ZIGZAG
}

model Background {
    id       String         @id @default(cuid())
    type     BackgroundType
    color    String?
    gradient String?
    imageUrl String?
    videoUrl String?
    pattern  PatternType?
    theme    Theme[]
}

enum ButtonShape {
    RECTANGLE
    ROUNDED
    CIRCULAR
}

enum ShadowStyle {
    NONE
    SOFT
    HARD
}

enum SpecialEffect {
    NONE
    TORN
    JIGGLY
    FORMAL
    FROST
    ALTERNATING_SHAPES
}

model ButtonStyle {
    id            String         @id @default(cuid())
    shape         ButtonShape
    shadow        ShadowStyle?
    specialEffect SpecialEffect?
    buttonColor   String?
    fontColor     String?
    shadowColor   String?
    theme         Theme[]
}

model Font {
    id     String  @id @default(cuid())
    family String
    color  String
    theme  Theme[]
}

model ThemeColors {
    id         String  @id @default(cuid())
    primary    String
    secondary  String?
    accent     String?
    background String?
    text       String?
    theme      Theme[]
}
