datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["views"]
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    username      String?       @unique
    emailVerified DateTime?     @map("email_verified")
    image         String?
    bio           String?
    layout        ProfileLayout @default(Classic)
    accounts      Account[]
    sessions      Session[]
    links         Link[]
    activities    Activity[]
    collections   Collection[]
    // Cada usuario puede tener un tema seleccionado (global o custom)
    theme         Theme?        @relation("UserTheme", fields: [themeId], references: [id], onDelete: SetNull)
    themeId       String?

    @@map("users")
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

enum ProfileLayout {
    Classic
    Hero
}

model Collection {
    id        String   @id @default(cuid())
    title     String
    userId    String   @map("user_id")
    active    Boolean  @default(true)
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    links     Link[]

    @@map("collections")
}

enum CollectionLayout {
    Stack
    Grid
    Carousel
}

model Link {
    id           String      @id @default(cuid())
    type         LinkType    @default(Link)
    layout       LinkLayout  @default(Classic)
    icon         String?
    thumbnail    String?
    title        String?
    url          String?     @db.Text
    shortCode    String?     @unique
    visits       Int         @default(0)
    position     Int
    userId       String      @map("user_id")
    collectionId String?
    active       Boolean     @default(true)
    archived     Boolean     @default(false)
    prioritize   Boolean     @default(false)
    createdAt    DateTime    @default(now())
    user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    activities   Activity[]
    collection   Collection? @relation(fields: [collectionId], references: [id])

    @@index([userId, collectionId, active])
    @@map("links")
}

enum LinkType {
    Link
    SocialIcon
}

enum LinkLayout {
    Classic
    Feature
}

view UserMetrics {
  userId    String @map("user_id")
  views     Int
  clicks    Int
  clickRate Float @map("click_rate")

  @@unique([userId])

  @@map("user_metrics")
}


model Activity {
    id        String       @id @default(cuid())
    type      ActivityType @default(View)
    userId    String       @map("user_id")
    linkId    String       @map("link_id")
    ip        String
    city      String?
    region    String?
    country   String?
    userAgent String?      @map("user_agent")
    os        String?
    browser   String?
    screen    String?
    timestamp DateTime     @default(now())
    loc       String?
    org       String?
    timezone  String?
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    link      Link         @relation(fields: [linkId], references: [id], onDelete: Cascade)

    @@index([linkId, timestamp])
    @@map("activities")
}

enum ActivityType {
    View
    Click
}

model Theme {
    id            String      @id @default(cuid())
    name          String
    premium       Boolean
    isCustom      Boolean     @default(false)
    // Si isCustom es true, ownerId se establecer√° para que el tema sea exclusivo de ese usuario.
    ownerId       String?
    backgroundId  String      @unique
    buttonStyleId String      @unique
    fontStyleId   String      @unique
    background    Background  @relation(fields: [backgroundId], references: [id])
    buttonStyle   ButtonStyle @relation(fields: [buttonStyleId], references: [id])
    fontStyle     FontStyle   @relation(fields: [fontStyleId], references: [id])
    User          User[]      @relation("UserTheme")

    @@map("themes")
}

model Background {
    id       String               @id @default(cuid())
    type     BackgroundType
    style    BackgroundStyleType?
    color    String
    imageUrl String?
    videoUrl String?
    themes   Theme?
}

enum BackgroundType {
    COLOR
    IMAGE
    VIDEO
    ANIMATED
}

enum BackgroundStyleType {
    FLAT
    COLORUP
    COLORDOWN
    POLKA
    STRIPE
    WAVES
    ZIGZAG
}

model ButtonStyle {
    id              String     @id @default(cuid())
    type            ButtonType
    backgroundColor String
    shadowColor     String
    textColor       String
    themes          Theme?
}

enum ButtonType {
    FILL
    FILL_ROUNDED
    FILL_CIRCULAR
    OUTLINE
    OUTLINE_ROUNDED
    OUTLINE_CIRCULAR
    SOFTSHADOW
    SOFTSHADOW_ROUNDED
    SOFTSHADOW_CIRCULAR
    HARDSHADOW
    HARDSHADOW_ROUNDED
    HARDSHADOW_CIRCULAR
}

model FontStyle {
    id         String     @id @default(cuid())
    color      String
    fontFamily FontFamily
    themes     Theme?
}

enum FontFamily {
    inter
    roboto
    montserrat
    poppins
    overpass_mono
}
