generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String?           @unique
  password         String?
  username         String?           @unique
  emailVerified    DateTime?         @map("email_verified")
  image            String?
  bio              String?
  themeId          String?
  accounts         Account[]
  linkInteractions LinkInteraction[]
  links            Link[]
  pageViews        PageView[]
  sessions         Session[]
  theme            Theme?            @relation(fields: [themeId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Link {
  id               String            @id @default(cuid())
  label            String
  url              String
  visible          Boolean           @default(true)
  order            Int
  archived         Boolean           @default(false)
  createdAt        DateTime          @default(now())
  userId           String
  linkInteractions LinkInteraction[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("links")
}

model PageView {
  id        String   @id @default(cuid())
  userId    String
  ip        String
  city      String?
  region    String?
  country   String?
  userAgent String
  os        String?
  browser   String?
  screen    String?
  viewedAt  DateTime @default(now())
  loc       String?
  org       String?
  referrer  String?
  timezone  String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("page_views")
}

model LinkInteraction {
  id           String   @id @default(cuid())
  linkId       String
  userId       String
  ip           String
  city         String?
  region       String?
  country      String?
  userAgent    String
  os           String?
  browser      String?
  screen       String?
  interactedAt DateTime @default(now())
  loc          String?
  org          String?
  timezone     String?
  link         Link     @relation(fields: [linkId], references: [id], onDelete: Cascade)
  User         User     @relation(fields: [userId], references: [id])

  @@map("link_interactions")
}

model Theme {
  id            String      @id @default(cuid())
  name          String      @unique
  description   String?
  previewUrl    String
  isPremium     Boolean     @default(false)
  backgroundId  String
  buttonStyleId String
  fontId        String
  colorsId      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  background    Background  @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  buttonStyle   ButtonStyle @relation(fields: [buttonStyleId], references: [id], onDelete: Cascade)
  colors        ThemeColors @relation(fields: [colorsId], references: [id], onDelete: Cascade)
  font          Font        @relation(fields: [fontId], references: [id], onDelete: Cascade)
  users         User[]
}

model Background {
  id       String         @id @default(cuid())
  type     BackgroundType
  color    String?
  gradient String?
  imageUrl String?
  videoUrl String?
  pattern  PatternType?
  Theme    Theme[]
}

model ButtonStyle {
  id            String         @id @default(cuid())
  shape         ButtonShape
  shadow        ShadowStyle?
  specialEffect SpecialEffect?
  buttonColor   String?
  fontColor     String?
  shadowColor   String?
  Theme         Theme[]
}

model Font {
  id     String  @id @default(cuid())
  family String
  color  String
  Theme  Theme[]
}

model ThemeColors {
  id         String  @id @default(cuid())
  primary    String
  secondary  String?
  accent     String?
  background String?
  text       String?
  Theme      Theme[]
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view UserMetrics {
  userId    String @map("user_id")
  views     Int
  clicks    Int
  clickRate Float @map("click_rate")

  @@unique([userId])

  @@map("user_metrics")
}

enum BackgroundType {
  FLAT
  GRADIENT
  IMAGE
  VIDEO
}

enum PatternType {
  NONE
  POLKA
  STRIPE
  WAVES
  ZIGZAG
}

enum ButtonShape {
  RECTANGLE
  ROUNDED
  CIRCULAR
}

enum ShadowStyle {
  NONE
  SOFT
  HARD
}

enum SpecialEffect {
  NONE
  TORN
  JIGGLY
  FORMAL
  FROST
  ALTERNATING_SHAPES
}
